name: CI - CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validations:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://catalogi:pg_password@localhost:5432/db
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: catalogi
          POSTGRES_PASSWORD: pg_password
          POSTGRES_DB: db
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
      - uses: bahmutov/npm-install@v1
      - name: Build back
        run: cd api && yarn build
      - name: Migrate db
        run: cd api && yarn migrate latest
      - name: Fullcheck
        run: yarn fullcheck
  
  check_if_version_upgraded:
    name: Check if version upgrade
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: validations
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
    steps:
      - uses: garronej/ts-ci@v2.1.5
        id: step1
        with:
          action_name: is_package_json_version_upgraded
      - run: |
          echo "from_version=${{ steps.step1.outputs.from_version }}"
          echo "to_version=${{ steps.step1.outputs.to_version }}"
          echo "is_upgraded_version=${{ steps.step1.outputs.is_upgraded_version }}"

  create_tag:
    name: Create version tag
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
    if: needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    env:
      TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create tag
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a v${{ env.TO_VERSION }} -m "Deployment tag for v${{ env.TO_VERSION }}"
          git push --tags

  create_github_release:
    name: "Create release notes"
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
      - create_tag
    if: |
      needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true' && github.event_name == 'push'
    env:
      RELEASE_TAG: v${{ needs.check_if_version_upgraded.outputs.to_version }}
    steps:
      - name: "Generate release on github"
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.RELEASE_TAG }}
          prerelease: false
          tag_name: ${{ env.RELEASE_TAG }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
    if: needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Computing Docker image tags
        id: step1
        env:
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
        run: |
          OUT_API=$GITHUB_REPOSITORY-api:$TO_VERSION,$GITHUB_REPOSITORY-api:latest
          OUT_API=$(echo "$OUT_API" | awk '{print tolower($0)}')
          echo ::set-output name=docker_api_tags::$OUT_API

          OUT_WEB=$GITHUB_REPOSITORY-web:$TO_VERSION,$GITHUB_REPOSITORY-web:latest
          OUT_WEB=$(echo "$OUT_WEB" | awk '{print tolower($0)}')
          echo ::set-output name=docker_web_tags::$OUT_WEB

      - uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile.api
          tags: ${{ steps.step1.outputs.docker_api_tags }}
      - uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile.web
          tags: ${{ steps.step1.outputs.docker_web_tags }}

